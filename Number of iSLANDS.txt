class Solution {
  public:
    void dfs(vector<vector<int>> &grid,vector<vector<int>> &visi,int i,int j)
    {
        if(i>=grid.size() or j>=grid[0].size() or i<0 or j<0 or visi[i][j]==1 or grid[i][j]==0)
        return ;
        
        visi[i][j]=1;
        
        dfs(grid,visi,i,j+1);
        dfs(grid,visi,i+1,j);
        dfs(grid,visi,i,j-1);
        dfs(grid,visi,i-1,j);
        
        return ;
    }
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        // Diagonally not connected only left,right,up,bottom
        // Make parent
        vector<int> ans;
        vector<vector<int>> grid(n,vector<int> (m,0));
        
        for(int l=0;l<operators.size();l++)
        {
            grid[operators[l][0]][operators[l][1]]=1;
            int ct=0;
            vector<vector<int>> visi(n,vector<int>(m,0));
            
            for(int i=0;i<n;i++)
            {
                for(int j=0;j<m;j++)
                {
                    if(visi[i][j]==0 and grid[i][j]==1)
                    {
                        dfs(grid,visi,i,j);
                        ct++;
                    }
                }
            }
            ans.push_back(ct);
        }
        
        return ans;
        
    }
};